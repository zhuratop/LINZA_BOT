import asyncio
import logging
import sqlite3
import sys

from typing import Optional
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MENU, FILL_FORM, PARTNERSHIP = range(3)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_data.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS answers
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   q1 TEXT, q2 TEXT, q3 TEXT, q4 TEXT, q5 TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (user_id INTEGER PRIMARY KEY)''')
conn.commit()


# ================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ================== #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        ['üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'],
        ['ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ'],
        ['üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
        ['üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞']
    ]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return MENU


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.effective_user.id

    if text == 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É':
        cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
        if cursor.fetchone():
            await update.message.reply_text("‚ùó –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É.")
            return MENU

        context.user_data.clear()
        context.user_data['question_number'] = 1
        await update.message.reply_text(
            "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
            reply_markup=ReplyKeyboardRemove()
        )
        return FILL_FORM

    elif text == 'ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ':
        keyboard = [
            ['üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'],
            ['üë• –î–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤'],
            ['üöÄ BizDev'],
            ['üîô –ù–∞–∑–∞–¥']
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return PARTNERSHIP

    elif text == 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        keyboard = [[InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="t.me/zhuratop_trep")]]
        await update.message.reply_text(
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MENU

    elif text == 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞':
        return await start(update, context)


# ================== –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ê–ù–ö–ï–¢–´ ================== #
async def handle_answers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–Ω–∫–µ—Ç—ã"""
    text = update.message.text
    q_num = context.user_data.get('question_number', 1)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_keyboard = ReplyKeyboardMarkup(
        [['üîô –ù–∞–∑–∞–¥', 'üè† –ú–µ–Ω—é']],
        resize_keyboard=True
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω—é
    if text == 'üè† –ú–µ–Ω—é':
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardRemove()
        )
        return await start(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
    if text == 'üîô –ù–∞–∑–∞–¥':
        if q_num > 1:
            q_num -= 1
            context.user_data['question_number'] = q_num
            await update.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å {q_num}: –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç.",
                reply_markup=nav_keyboard
            )
            return FILL_FORM
        else:
            await update.message.reply_text("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ.")
            return FILL_FORM

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    context.user_data[f'q{q_num}'] = text
    q_num += 1

    if q_num > 5:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –ë–î
        cursor.execute('''INSERT INTO answers 
                       (q1, q2, q3, q4, q5) 
                       VALUES (?, ?, ?, ?, ?)''',
                       (context.user_data.get('q1'),
                        context.user_data.get('q2'),
                        context.user_data.get('q3'),
                        context.user_data.get('q4'),
                        context.user_data.get('q5')))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (update.effective_user.id,))
        conn.commit()

        await update.message.reply_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        return await start(update, context)

    context.user_data['question_number'] = q_num
    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å {q_num}: –í–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?",
        reply_markup=nav_keyboard
    )
    return FILL_FORM

# ================== –ü–ê–†–¢–ù–ï–†–°–¢–í–û ================== #
async def handle_partnership(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞"""
    text = update.message.text
    response = {
        'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞': '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: ...',
        'üë• –î–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤: ...',
        'üöÄ BizDev': 'BizDev —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: ...',
        'üîô –ù–∞–∑–∞–¥': None
    }.get(text)

    if text == 'üîô –ù–∞–∑–∞–¥':
        return await start(update, context)

    await update.message.reply_text(response)
    return PARTNERSHIP


# ================== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ================== #
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token("7610154832:AAE5f3cgn0fx9yZGXV8ctlRl0lwCXaOc2to").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
            FILL_FORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answers)],
            PARTNERSHIP: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_partnership)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(lambda update, ctx: None))  # –î–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫

    application.run_polling()


if __name__ == '__main__':
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    main()
